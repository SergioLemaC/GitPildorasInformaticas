EVENTOS-------------------------------------------------------------------

Desencadenante de una acción

Hay que identificar los 3 factores que van a tener lugar cuando se 
desencadene un evento en la interfaz de usuario

-Qué desencadena la acción: Objeto Evento

-Quién desencadena la acción: Objeto Fuente

-Quién recibe la acción: Objeto Listener

Objeto Evento: EventObjec --> ActionEvent - WindowEvent

Objeto Fuente: (Class*)Jbutton --> (Function*)addActionListener(Objeto listener) //Aquí cae el objeto evento

Objeto Listener: (Class*)Jpanel --> (Interface*)ActionListener --> (Function*)actionPerformed(Objeto Evento)  //Esta función luego recibe el objeto evento


EVENTOS DE VENTANA--------------------------------------------------------

Implements
(Interface*)WindowListener -->
	(Function)windowActivated(WindowEvent e)
	(Function)windowClosed(WindowEvent e)
	(Function)windowClosing(WindowEvent e)
	(Function)windowDeactivated(WindowEvent e)
	(Function)windowDeiconified(WindowEvent e)
	(Function)windowIconified(WindowEvent e)
	(Function)windowOpened(WindowEvent e)


CLASE ADAPTADORA----------------------------------------------------------

Son útiles cuando vas a manejar interfaces que cuentan con varias funciones
en su interior, porque simplifican el código. Lo que haces es heredar de esa
clase para así no tener que implementar funciones que no necesites.

(Class)KeyAdapter
(Class)MouseAdapter
(Class)WindowAdapter --> Implements
	(Interface)WindowFocusListener
	(Interface)WindowListener
	(Interface)WindowStateListener
	(Interface)EventListener

Implements
(Interface*)WindowStateListener -->
	(Function)windowStateChanged(WindowEvent e)

(Class)WindowEvent -->
	(Function)getNewState() //Devuelve el nuevo estado de la ventana
	(Function)getOldState() //Devuelve el estado anterior


EVENTOS DE TECLADO--------------------------------------------------------

(Class)KeyAdapter --> Implements
	(Interface)KeyListener

Implements
(Interface*)KeyListener -->
	(Function)keyPressed(KeyEvent e) //Cuando una tecla es presionada
	(Function)keyReleased(KeyEvent e) //Cuando quitamos el dedo de la tecla
	(Function)keyTyped(KeyEvent e) //Sucesor de las anteriores, cuando se presiona la tecla y se levanta el dedo dejando de presionar


EVENTOS DE RATÓN----------------------------------------------------------

(Class)MouseAdapter --> Implements
	(Interface)MouseListener
	(Function)getX()
	(Function)getY()
	(Function)getModifiersEx()
	(Function)getClickCount()
	(Fields)BUTTON1_DOWN_MASK
	(Fields)BUTTON2_DOWN_MASK
	(Fields)BUTTON3_DOWN_MASK

Implements
(Interface*)MouseListener -->
	(Function)mouseClicked(MouseEvent e)
	(Function)mouseEntered(MouseEvent e)
	(Function)mouseExited(MouseEvent e)
	(Function)mousePressed(MouseEvent e)
	(Function)mouseReleased(MouseEvent e)


EVENTOS DE FOCO-----------------------------------------------------------

Eso quiere decir qué ventana está seleccionada, es decir, si tenemos dos o
más ventanas abiertas, pues la que tengamos seleccionada es la que tiene
el foco.

(Class)FocusAdapter --> Implements
	(Interface)FocusListener

Implements
(Interface*)FocusListener -->
	(Function)focusGained(FocusEvent e) //Desencadena acción cuando obtiene el foco
	(Function)focusLost(FocusEvent e) //Desencadena acción cuando pierde el foco

EVENTOS DE FOCO CON VENTANAS---------------------

(Class)WindowAdapter --> Implements
	(Interface)WindowFocusListener

Implements
(Interface*)WindowFocusListener -->
	(Function)windowGainedFocus(FocusEvent e) //Desencadena acción cuando una ventana obtiene el foco
	(Function)windowLostFocus(FocusEvent e) //Desencadena acción cuando una ventana pierde el foco


MÚLTIPLES FUENTES DE EVENTO-----------------------------------------------

(Class)AbstractAction --> Implements
	(Interface)Action

Implements
(Interface*)Action -->
	(Function)actionPerformed(ActionEvent e)
	(Function)setEnabled(boolean b)
	(Function)isEnabled(boolean b)
	(Function)putValue(String clave, Object valor)
	(Function)getValue(String clave)
	(Function)addPropertyChangedListener(PropertyChangedListener oyente)
	(Function)removePropertyChangedListener(PropertyChangedListener oyente)


ASIGNANDO ACCIONES AL TECLADO---------------------------------------------

(Class)KeyStroke -->
	(Function)static getKeyStroke(String s)

(Class)InputMap -->
	(Function)put(KeyStroke, Object)

(Class)JPanel -->
	(Function)getInputMap(int condición)

(Class)ActionMap -->
	(Function)put(Object, acción)


LAYOUTS-------------------------------------------------------------------

(Class)FlowLayout // Esta la usan las láminas por defecto
(Class)BorderLayout // Dividir el contenedor para colocarlo en las esquinas del frame
(Class)GridLayout // Tomar el contenedor y dividirlo en varias filas y columnas que quedan como celdas


COMPONENTES SWING---------------------------------------------------------

//Componentes para introducir texto

(Class Abstract)JTextComponent -->
	(Function)void setText(String t) //Establecer texto
	(Function)void getText() //Obtener el texto
	(Function)getDocument() //Devuelve un documento (Interface)Document

Extends JTextComponent
(Class)JTextField //Cuadrito de una línea de texto
(Class)JTextArea //Cuadro de texto como si fuera descripción

(Interface)Document -->
	(Function)addDocumentListener() //Esto dispara un evento cuando sufre un cambio (Event)documentEvent()


//Clase para gestionar eventos de tipo documento (Document)
(Class)ReceptoraEvento --> Implements
	(Interface)DocumentListener()

Implements
(Interface*)DocumentListener -->
	(Function)removeUpdate() //Cuando se elimina texto
	(Function)insertUpdate() //Cuando se inserta texto
	(Function)changedUpdate() //Cuando el texto que hay, se modifican alguna de sus propiedades


(Class)JTextArea -->
	(Function)getText() //Devuelve el texto que hay escrito allí
	(Function)setLineWrap(boolean) //Establece si el área de texto tiene salto de línea o no
	(Function)getLineWrap() //Decir si el área de texto tiene o no saltos de línea


//Componente de casilla de verificación

(Class)JCheckBox -->
	(Function)isSelected()
	(Function)setSelected(boolean)


//Componente de botón de radio

(Class)JRadioButton //Esta clase se instancia por cada botón que vayamos a poner
(Class)ButtonGroup //Para que luego de construir los botones adquieran el comportamiento de que solo uno
de ellos pueda estar seleccionado, tenemos q usar esta clase, o para agrupar los botones y tengan esa función


//Componente parecido al Spinner de Android Studio

(Class)JComboBox -->
	(Function)addItem() //Agregamos elementos al desplegable
	(Function)getSelectedItem() //Capturar el elemento seleccionado


//Control deslizante, parecido al volumen de los vídeos de YouTube

(Class)JSlider -->
	(Function)setPaintTicks(boolean)
	(Function)setMajorTickSpacing(int)
	(Function)setMinorTickSpacing(int)
	(Function)setPaintLabels(boolean)
	(Function)setSnapToTicks(boolean)
	(Function)getValue() //Devuelve el valor del Slider donde se encuentre
//Para que responda a eventos
	(Function)addChangeListener(ChangeListener) //Pone a la escucha el componente para detectar cambios en su estado


//Componente de texto con botones

(Class)JSpinner -->
	(Constructor)JSpinner()
	(Constructor)JSpinner(SpinnerModel modelo) //Nos permite representar otro tipo de valores diferentes


//Componentes para crear un menú

(Class)JMenuBar
(Class)JMenu
(Class)JMenuItem -->
	(Constructor)JMenuItem(String texto)
	(Constructor)JMenuItem(String texto, Icon icono) //Nos permite poner una imagen como ícono del item del menú
	(Function)setAccelerator(KeyStroke object)


//Crear menús con checkbox y radiobutton

(Class)JCheckBoxMenuItem
(Class)JRadioButtonMenuItem


//Crear menús emergentes al pulsar click derecho

(Class)JPopupMenu -->
	(Function)setComponentPopupMenu(Componente c)
	

//Crear barra de herramientas

(Class)JToolBar -->
	(Function)add(Action accion)


DISPOSICIONES AVANZADAS--------------------------------------------------

EN CAJA-----------------------------
//Crea cajas a modo de contenedor, con esta clase caja puede jugar a meter una caja dentro de otra
(Class)Box -->
	(Function)createHorizontalBox() //Crear una caja en la cual los elementos que introduzcan en su interior se irán colocando horizontalmente
	(Function)createVerticalBox() //Crea una caja en la cual los elementos que vayas metiendo dentro se van colocando verticalmente
	(Function)createVerticalStrut(int height) //Permite determinar la distancia en píxeles que hay entre los elementos que vas colocando en esa caja vertical
	(Function)createHorizontalStrut(int width) //Permite determinar la distancia en píxeles que hay entre los elementos que vas colocando en esa caja horizontal
	(Function)createGlue() //Adapta la distancia que hay entre los elementos en el caso de que se redimensione el contenedor


EN MUELLE---------------------------
//
(Class)SpringLayout -->
	(Function)putConstraint(String e1, Component c1, int pad, String e2, Component c2)

(Class)Spring -->
	(Function)static constant(int a, int b, int c)


LIBRE-------------------------------
//Nos permiten colocar los elementos donde queramos, en cualquier parte del contenedor

No se implementa alguna clase, solo una función a la que le pasamos unos parámetros que representan a la posición en el marco o coordenadas

(Function)setLayout(null) //Esto para que no coloque los elementos por defecto
(Function)setBounds(int x, int y, int ancho, int alto)

//Clase que se puede usar para reutilizar las propiedades de diseño
(Interface)LayoutManager -->
	(Function)addLayoutComponent(String nombre, Component c)
	(Function)minimumLayoutSize(Container padre)
	(Function)layoutContainer(Container padre) //Especifica el contenedor donde quieres añadir los elementos
	(Function)preferredLayoutSize(Container padre)
	(Function)removeLayoutComponent(Component c)

(Class)Container -->
	(Function)getComponentCount()
	(Function)getComponent(int i)


VENTANAS EMERGENTES-------------------------------------------------------

//Son ventanas que se abren cuando trabajamos con aplicaciones gráficas
que se disparan en algún momento

CUADROS DE DIÁLOGO-------------------
(Class)JOptionPane -->
	(Function)showInputDialog
	(Function)showConfirmDialog
	(Function)showMessageDialog
	(Function)showOptionDialog

SELECCIÓN DE FICHEROS----------------
(Class)JFileChooser

SELECTOR DE COLOR--------------------
(Class)JColorChooser




STREAMS-------------------------------------------------------------------

Flujo de bytes-----------------------

Secuencia de entrada
(Class Abstract)InputStrean -->

Secuencia de salida
(Class Abstract)OutputStream -->


Flujo de caracteres-----------------

Secuencia de entrada
(Class Abstract)Reader -->

Secuencia de salida
(Class Abstract)Writer -->


BUFFERS-------------------------------

(Class)BufferedReader -->
	(Function)readLine()


STREAMS BYTE-------------------------

(Class)FileInputStream -->
	(Function)read()
	(Function)close()

(Class)FileOutputStream -->
	(Function)write()
	(Function)close()


SERIALIZACIÓN--------------------------

(Interface*)Serializable -->
	(Class)ObjectOutputStream -->
		(Function)writeObject()

	(Class)ObjectInputStream -->
		(Function)readObject()


ARCHIVOS Y DIRECTORIOS-----------------------------

(Class)File -->
	(Function)String getAbsolutePath()
	(Function)String getPath()
	(Function)String getCanonicalPath()
	(Function)Boolean exists()
	(Function)String[] list()
	(Function)Boolean isDirectory()



COLECCIONES---------------------------------------------------------------

(Interface)Collection -->
	(Interface)Set --> //Permite almacenar una coleccion de elementos no repetidos y sin ordenar
		(Interface)SortedSet
	(Interface)List //Pueden estar repetidos e indexados con valores numéricos - sustituto del Array
	(Interface)Queue //Son las colas, no permite acceso aleatorio y solo se pueden acceder a los elementos que están al inicio o final de la cola, o a ambos

(Interface)Map --> //Permite crear una colección de elementos, que pueden estar repetidos, indexados por clave única arbitraria, osea que en vez de dar índices como en los arrays (posición[0], [1], etcetc), en los Map identificamos esos elementos con una clave que no tiene por qué ser un valor numérico
	(Interface)SortedMap


(Interface)Collection -->
	(Interface)List -->
		(Class)ArrayList //Muy rápida accediendo a elementos y se adapta a un gran número de escenarios
		(Class)LinkedList //Listas enlazadas, y es eficiente agregando y eliminando elementos pero no leyéndolos
		(Class)Vector //Está como obsoleta, y se usaba más para operaciones de concurrencia (manejo de hilos [Threads])
		(Class)CopyOnWriteArrayList //Se utiliza en programas concurrentes, y es eficiente en operaciones de lectura, en escritura no tanto


(Interface)Collection -->
	(Interface)Set -->
		(Class)HashSet //Rápida, no duplicados, no ordenamiento y no acceso aleatorio
		(Class)LinkedHashSet //Ordenamiendo por entrada, eficiente al acceder pero no al agregar
		(Class)TreeSet //Ordenado pero poco eficiente
		(Class)EnumSet //La mejor para objetos de tipo enum
		(Class)CopyOnWriteArraySet //Específico concurrencia, eficiente lectura pero no para escritura y eliminación
		(Class)ConcurrentSkipListSet //Específico concurrencia, admite ordenamiento pero con muchos elementos no es eficiente


(Interface)Collection -->
	(Interface)Map -->
		(Class)HashMap //No ordenamiento pero eficiente
		(Class)LinkedHashMap //Ordenado por inserción, permite ordemaniento por uso, es eficiente en lectura pero no en escritura
		(Class)TreeMap //Ordenado por clave pero para nada eficiente
		(Class)EnumMap //Permite tipos enum como claves y es muy eficiente
		(Class)WeakHashMap //Utilizado para crear elementos que vaya borrando el sistema si no se usan, y es poco eficiente
		(Class)HashTable //Considerado obsoleto, utilizado en operaciones de concurrencia
		(Class)ConcurrentHashMap //Utilizado en concurrencia y no permite nulos


(Interface)Collection -->
	(Interface)Queue -->
		(Class)ArrayDeque //Gran eficiencia y es la más usada
		(Class)LinkedBlockingDeque //Utilizado en programación concurrente
		(Class)LinkedList //Rendimiento inferior al ArrayDeque
		(Class)ProrityQueue //Para utilizar un Comparator, el primer elemento dependerá de la propiedad elegida
		(Class)PriorityBlockingQueue //Igual que el anterior pero más eficiente en programación concurrente


ITERADORES--------------------------------------

(Interface)Iterator<E> -->
	(Function)next() //Salta al siguiente elemento de la colección
	(Function)hasnext() //Devuelve boolean si hay o no un objeto siguiente dentro de la colección
	(Function)remove() //Elimina objetos de la colección